#lang racket

(require rackunit rackunit/text-ui)



#|
;; 7
(define (accumulate combiner null-value term a next b)
  (define (iter c last)
    (if (> c b)
        last
        (iter (next c) (combiner last (term a)))))
  (iter a null-value))

(define (verybadexists? predicate a b)
  (> (accumulate +
                 0
                 (lambda (x) (if (predicate x) 1 0))
                 a
                 (lambda (x) (+ 1 x))
                 b)
     0))

(define (badexists? predicate a b)
  (accumulate (lambda (x y) (or x y))
              #f
              predicate
              a
              (lambda (x) (+ x 1))
              b))

(define (exists? predicate a b)
  (and (<= a b)
       (or (predicate a)
           (exists? predicate (+ 1 a) b))))

;;;; see accumulate.scm file
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a last)
    (if (> a b)
        last
        (iter (next a) (combiner (term a) last))
        ))
  (iter a null-value))



;; 5
(define (count predicate a b)
  (accumulate-iter + 0
              (lambda(x) (if (predicate x) 1 0))
              a
              (lambda (x) (+ 1 x))
              b))


(count even? 1 5) ; 2

(count even? 0 10) ; 6
(count odd? 1 5) ; 3
(count odd? 0 10) ; 5

;; 6
(define (reverse-digits n)
  (define (append-digit n d)
    (+ (* 10 n) d))

  (define (last-digit n)
    (remainder n 10))

  (define (cut-last-digit n)
    (quotient n 10))

  (define (iter acc n)
    (if (zero? n)
        acc
        (iter (append-digit acc (last-digit n)) (cut-last-digit n))))

  (iter 0 n))

(define (count-palindromes a b)
  (define (palindrom? x) (= x (reverse-digits x)))
  (count palindrom? a b))

;;;; palindromes
(define (sum term a b)
  (accumulate-iter + 0 term a (lambda (x) (+ 1 x)) b))

(define (product term a b)
  (accumulate-iter * 1 term a (lambda (x) (+ 1 x)) b))
;(sum (lambda (x) (* x x)) 1 4)

(define (accumulate combiner null-value term a b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner
                                     null-value
                                     term
                                     (+ a 1)
                                     b))))

(define (sum term a b)
  (accumulate + 0 term a b))

(define (product term a b)
  (accumulate * 1 term a b))

(define (fractions a b)
  (accumulate (lambda (x y) (/ (+ x y) 2)) 0 (lambda (x) x) a b))

;;;
 ;l;;
 ;;;moreeeeeeeee
(define (product term a b)
  (if (> a b)
      0
      (* (term a) (product term (+ a 1) b))))

;;
(define (sum term a b)
  (if (> a b)
      0
      (+ (term a) (sum term (+ 1 a) b))))

(define (sum-integers a b)
  (define (identity x) x)
  (sum identity a b))
(define (sum-sq a b)
  (sum (lambda (x) (* x x)) a b))
(define (sum-cubes a b)
  (sum (lambda (x) (* x x x)) a b))

;;;


(define (fib n)
  (define (rec k)
   (cond ((= 0 k) 0)
         ((= 1 k) 1)
         (else (+ (rec (- k 1)) (rec (- k 2)))))
  )
  (define (iter pre-last last count)
    (if (= count n)
        pre-last
        (iter last (+ last pre-last) (+ 1 count))))
  (iter 0 1 0)
  ; rec n
)
;;

(define (prime? n)
  (define (count-divisors n)
      (define (iterative it last)
        (if (= it 0)
            last
            (iterative (- it 1)
                   (if (= (remainder n it) 0)
                       (+ last 1)
                       last)
                   )))
    (iterative n 0)
  )
  (= 2 (count-divisors n)))

;;
(define (count-divisors n)
  (define (rec k)
    (if (= k 0)
        0
        (+ (if (= 0 (remainder n k)) 1 0)
           (rec (- k 1)))))
  (define (iterative it last)
    (if (= it 0)
        last
        (iterative (- it 1)
                   (if (= (remainder n it) 0)
                       (+ last 1)
                       last)
                   )))
  ;(rec n)
  (iterative n 0)
)
;(count-divisors 1234567) ; ! very long with recursive

;;
(define (reverse-digits n)
  
  (define (recursive n)
    (define (count-digits n)
      (if (= n 0)
          0
          (+ 1 (count-digits (quotient n 10)))))
    (if (= n 0)
        n
        (+ (recursive (quotient n 10))
           (* (expt 10 (count-digits (quotient n 10)))
              (remainder n 10)))
        )
  )
  (define (iterative it last)
    (if (= it 0)
        last
        (iterative (quotient it 10)
                   (+ (* 10 last) (remainder it 10)))
    )
  )
  (recursive n)
;  (iterative n 0)
)
;;

(define (sum-digits n)
  (define (recursive n)
    (if (= n 0)
        0
        (+ (remainder n 10) (recursive (quotient n 10))))
  )
  (define (iterative it last)
    (if (= it 0)
        last
        (iterative (quotient it 10) (+ last (remainder it 10)))
        )
  )
  ;(recursive n)
  (iterative n 0)
)

;;
(define (count-digits n)
  (define (recursive n)
    (if (= n 0)
        0
        (+ 1 (recursive (quotient n 10)))
     ))
  (define (iter current_quot last)
    (if (= current_quot 0)
        last
        (iter (quotient current_quot 10) (+ last 1))
     ))
  ;(recursive n)
  (iter n 0)
  )
;;
(define (expt-iter base exp)
  (define (helper iter last)
    (if (> iter exp)
        last
        (helper (+ iter 1) (* last base))
  ))
  (if (= exp 0)
      1
      (helper 1 1))) 
;;
(define (sum-iter start end)
  (define (helper iter last)
    (if (> iter end) last
        (helper (+ iter 1) (+ last iter)))
    )
  (if (> start end) 0
      (helper start 0)
  )
)
;;
(define (fact-iter n)
  (define (iter i last)
    (if (> i n)
        last
        (iter (+ 1 i) (* last i))
     ))

  (iter 1 1)
  )

;;iterations

;; 
(define (sum start end)
  (if (> start end) 0
      (+ start (sum (+ start 1) end))))
;;
(define (signum n)
  (cond ((= n 0) 0)
        ((< n 0) -1)
        ((> n 0) 1)))
;;
(define (factorial x)
  (if (= x 0)
      1
      (* x (factorial (- x 1)))))
;;;;
(define (expt x n)
  (if (= n 0)
      1
      (* x (expt x (- n 1)))))
;;;;;
;;;; ex 1
;;;;;
(define (even? x)
  (= 0 (remainder x 2)))

(define (odd? x) (not (even? x)))

|#